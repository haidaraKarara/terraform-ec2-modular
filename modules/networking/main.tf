# modules/networking/main.tf
# Module pour la gestion du r√©seau et s√©curit√©
# Ce module cr√©e l'infrastructure r√©seau compl√®te pour notre application
#
# üéØ STRAT√âGIE COUNT POUR LA HAUTE DISPONIBILIT√â
# ===============================================
# Ce module utilise la variable `count` pour cr√©er une architecture multi-AZ :
#
# üìä RESSOURCES CR√â√âES AVEC COUNT :
# ‚Ä¢ 2 sous-r√©seaux publics (aws_subnet.public)
# ‚Ä¢ 2 associations de routage (aws_route_table_association.public)
#
# üîÑ FONCTIONNEMENT DE COUNT :
# ‚Ä¢ count = 2 ‚Üí Terraform cr√©e 2 instances de la ressource
# ‚Ä¢ count.index ‚Üí Variable automatique (0, 1, 2...) pour diff√©rencier chaque instance
# ‚Ä¢ aws_subnet.public[0] ‚Üí Premier sous-r√©seau (AZ 1, CIDR 10.0.1.0/24)
# ‚Ä¢ aws_subnet.public[1] ‚Üí Deuxi√®me sous-r√©seau (AZ 2, CIDR 10.0.2.0/24)
#
# üåç AVANTAGES MULTI-AZ :
# ‚Ä¢ Haute disponibilit√© : Si une AZ tombe, l'autre continue
# ‚Ä¢ Distribution g√©ographique : R√©silience aux pannes datacenter
# ‚Ä¢ Load balancing : Trafic r√©parti sur plusieurs zones
# ‚Ä¢ Conformit√© : Respect des bonnes pratiques AWS

# ========================================
# D√âTECTION AUTOMATIQUE DES ZONES DE DISPONIBILIT√â
# ========================================

# Cette ressource "data" permet de r√©cup√©rer automatiquement la liste
# des zones de disponibilit√© (AZ) disponibles dans la r√©gion AWS choisie
data "aws_availability_zones" "available" {
  state = "available"  # Filtre pour ne r√©cup√©rer que les AZ actives
}

# ========================================
# CR√âATION DU VPC (VIRTUAL PRIVATE CLOUD)
# ========================================

# Le VPC est notre r√©seau priv√© virtuel dans AWS
# C'est l'√©quivalent d'un centre de donn√©es virtuel isol√©
resource "aws_vpc" "main" {
  # D√©finit la plage d'adresses IP priv√©es pour notre VPC (ex: 10.0.0.0/16)
  cidr_block = var.vpc_cidr
  
  # Active la r√©solution DNS des noms d'h√¥tes dans le VPC
  # Permet aux instances d'avoir des noms DNS plut√¥t que juste des IPs
  enable_dns_hostnames = true
  
  # Active le support DNS dans le VPC
  # N√©cessaire pour que les instances puissent r√©soudre les noms de domaine
  enable_dns_support = true

  # Fusion des tags communs avec des tags sp√©cifiques √† cette ressource
  tags = merge(var.common_tags, {
    Name = "${var.project_name}-${var.environment}-vpc"  # Nom unique du VPC
    Type = "VPC"  # Type de ressource pour faciliter la gestion
  })
}

# ========================================
# PASSERELLE INTERNET (INTERNET GATEWAY)
# ========================================

# L'Internet Gateway permet aux ressources du VPC d'acc√©der √† Internet
# C'est le pont entre notre r√©seau priv√© et Internet
resource "aws_internet_gateway" "main" {
  # Attache cette passerelle √† notre VPC
  vpc_id = aws_vpc.main.id

  # Tags pour identifier et organiser cette ressource
  tags = merge(var.common_tags, {
    Name = "${var.project_name}-${var.environment}-igw"  # Nom unique de la passerelle
    Type = "InternetGateway"  # Type de ressource
  })
}

# ========================================
# SOUS-R√âSEAUX PUBLICS (PUBLIC SUBNETS)
# ========================================

# Cr√©e 2 sous-r√©seaux publics dans diff√©rentes zones de disponibilit√©
# Cela assure la haute disponibilit√© de notre application
resource "aws_subnet" "public" {
  
  # ========================================
  # M√âTA-ARGUMENT COUNT : CR√âATION MULTIPLE
  # ========================================
  
  # count = 2 signifie "cr√©er 2 instances de cette ressource"
  # Terraform va ex√©cuter ce bloc 2 fois avec count.index = 0, puis count.index = 1
  count = 2
  
  # ========================================
  # CONFIGURATION DE BASE (IDENTIQUE POUR TOUS)
  # ========================================

  # Associe chaque sous-r√©seau √† notre VPC (m√™me VPC pour tous)
  vpc_id = aws_vpc.main.id
  
  # ========================================
  # CONFIGURATION DYNAMIQUE (DIFF√âRENTE POUR CHAQUE)
  # ========================================
  
  # Calcule automatiquement le CIDR de chaque sous-r√©seau en utilisant count.index
  # count.index = 0 ‚Üí "10.0.${0 + 1}.0/24" = "10.0.1.0/24" (Subnet 1)
  # count.index = 1 ‚Üí "10.0.${1 + 1}.0/24" = "10.0.2.0/24" (Subnet 2)
  # R√©sultat : 2 sous-r√©seaux avec des plages IP diff√©rentes
  cidr_block = "10.0.${count.index + 1}.0/24"
  
  # S√©lectionne une zone de disponibilit√© diff√©rente pour chaque sous-r√©seau
  # count.index = 0 ‚Üí data.aws_availability_zones.available.names[0] (ex: us-east-1a)
  # count.index = 1 ‚Üí data.aws_availability_zones.available.names[1] (ex: us-east-1b)
  # R√©sultat : Distribution g√©ographique pour haute disponibilit√©
  availability_zone = data.aws_availability_zones.available.names[count.index]
  
  # NE PAS attribuer d'IP publique automatiquement aux instances
  # S√©curit√© renforc√©e : les instances n'auront pas d'acc√®s direct √† Internet
  map_public_ip_on_launch = false

  # ========================================
  # TAGS DYNAMIQUES (UTILISATION DE COUNT.INDEX)
  # ========================================
  
  # Tags pour identifier chaque sous-r√©seau individuellement
  tags = merge(var.common_tags, {
    # Nom unique pour chaque sous-r√©seau utilisant count.index
    # count.index = 0 ‚Üí "projet-dev-public-subnet-1"
    # count.index = 1 ‚Üí "projet-dev-public-subnet-2"
    Name = "${var.project_name}-${var.environment}-public-subnet-${count.index + 1}"
    
    Type = "PublicSubnet"  # Type identique pour tous
    
    # Zone de disponibilit√© sp√©cifique √† chaque sous-r√©seau
    # Utilise le m√™me index que pour availability_zone
    AZ = data.aws_availability_zones.available.names[count.index]
  })
}

# ========================================
# TABLE DE ROUTAGE POUR LES SOUS-R√âSEAUX PUBLICS
# ========================================

# La table de routage d√©finit comment le trafic r√©seau est dirig√©
# Elle indique o√π envoyer les paquets selon leur destination
resource "aws_route_table" "public" {
  # Associe cette table de routage √† notre VPC
  vpc_id = aws_vpc.main.id

  # D√©finit une route par d√©faut vers Internet
  route {
    # 0.0.0.0/0 signifie "toutes les adresses IP" (route par d√©faut)
    cidr_block = "0.0.0.0/0"
    
    # Dirige tout le trafic vers l'Internet Gateway
    # Cela permet aux ressources des sous-r√©seaux d'acc√©der √† Internet
    gateway_id = aws_internet_gateway.main.id
  }

  # Tags pour identifier cette table de routage
  tags = merge(var.common_tags, {
    Name = "${var.project_name}-${var.environment}-public-rt"  # Nom unique
    Type = "RouteTable"  # Type de ressource
  })
}

# ========================================
# ASSOCIATIONS TABLE DE ROUTAGE - SOUS-R√âSEAUX
# ========================================

# Associe chaque sous-r√©seau public √† la table de routage publique
# Sans cette association, les sous-r√©seaux ne sauraient pas comment router le trafic
resource "aws_route_table_association" "public" {
  
  # ========================================
  # COUNT SYNCHRONIS√â AVEC LES SOUS-R√âSEAUX
  # ========================================
  
  # IMPORTANT : count = 2 doit correspondre au count des sous-r√©seaux
  # Cr√©e une association pour chaque sous-r√©seau cr√©√© pr√©c√©demment
  count = 2

  # ========================================
  # R√âF√âRENCE AUX RESSOURCES CR√â√âES PAR COUNT
  # ========================================
  
  # R√©f√©rence les sous-r√©seaux cr√©√©s pr√©c√©demment avec count
  # aws_subnet.public[0] ‚Üí Premier sous-r√©seau (count.index = 0)
  # aws_subnet.public[1] ‚Üí Deuxi√®me sous-r√©seau (count.index = 1)
  # La notation [count.index] permet de r√©f√©rencer la bonne instance
  subnet_id = aws_subnet.public[count.index].id
  
  # ID de la table de routage √† associer
  route_table_id = aws_route_table.public.id
}

# ========================================
# GROUPE DE S√âCURIT√â POUR LES INSTANCES EC2
# ========================================

# Le Security Group agit comme un firewall virtuel pour contr√¥ler le trafic
# Il d√©finit quelles connexions sont autoris√©es (entrantes et sortantes)
resource "aws_security_group" "ec2_sg" {
  # Pr√©fixe pour le nom du security group (AWS ajoutera un suffixe unique)
  name_prefix = "${var.project_name}-${var.environment}-"
  
  # Description pour documenter l'usage de ce security group
  description = "Security group for ${var.project_name} EC2 instance"
  
  # Associe ce security group √† notre VPC
  vpc_id = aws_vpc.main.id

  # ========================================
  # R√àGLES D'ENTR√âE (INGRESS)
  # ========================================
  
  # IMPORTANT: Pas d'acc√®s SSH (port 22)
  # Nous utilisons AWS Systems Manager Session Manager pour un acc√®s s√©curis√©
  # Cela √©vite d'exposer le port SSH qui est souvent cibl√© par les attaques

  # R√®gle 1: Acc√®s HTTP (port 80)
  ingress {
    from_port   = 80      # Port de d√©but (80 pour HTTP)
    to_port     = 80      # Port de fin (m√™me port)
    protocol    = "tcp"   # Protocole TCP
    cidr_blocks = var.allowed_http_cidrs  # Adresses IP autoris√©es (depuis les variables)
    description = "HTTP access"  # Description de la r√®gle
  }

  # R√®gle 2: Acc√®s HTTPS (port 443) - CONDITIONNEL
  # Utilise un bloc "dynamic" pour cr√©er cette r√®gle seulement si HTTPS est activ√©
  dynamic "ingress" {
    # Si enable_https est true, cr√©e 1 r√®gle [1], sinon cr√©e 0 r√®gle []
    for_each = var.enable_https ? [1] : []
    
    content {
      from_port   = 443     # Port HTTPS
      to_port     = 443
      protocol    = "tcp"
      cidr_blocks = var.allowed_http_cidrs  # M√™mes IPs autoris√©es que HTTP
      description = "HTTPS access"
    }
  }

  # ========================================
  # R√àGLES DE SORTIE (EGRESS)
  # ========================================
  
  # Autorise TOUT le trafic sortant
  # Les instances peuvent communiquer avec n'importe quel service externe
  egress {
    from_port   = 0           # Port 0 = tous les ports
    to_port     = 0           # Port 0 = tous les ports
    protocol    = "-1"        # -1 = tous les protocoles (TCP, UDP, ICMP, etc.)
    cidr_blocks = ["0.0.0.0/0"]  # Toutes les destinations Internet
    description = "All outbound traffic"  # Description de la r√®gle
  }

  # Tags pour identifier ce security group
  tags = merge(var.common_tags, {
    Name = "${var.project_name}-${var.environment}-sg"  # Nom unique
    Type = "SecurityGroup"  # Type de ressource
  })

  # ========================================
  # GESTION DU CYCLE DE VIE
  # ========================================
  
  # Cr√©e le nouveau security group AVANT de supprimer l'ancien
  # √âvite les interruptions de service lors des mises √† jour
  lifecycle {
    create_before_destroy = true
  }
}
